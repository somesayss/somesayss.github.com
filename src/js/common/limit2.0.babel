"use strict";
/**
 * 2015.10.8
 * 对ES的增强
 * version: 2.0.0
 * 更加优美的构造，入口的统一，ES6语法
 */
define(function(require, exports) {

	// 依赖
	const limitDom = require('./limit-dom'); 

	// 变量
	const [limit, WIN, DOC, BODY, objectProto, arrayProto] = [{}, window, window.document, document.body, Object.prototype, Array.prototype];

	// 确定全局是否用兼容方法
	limit.limitFixed = false;
	limit.logClosed = false;

	// 自有属性
	const {defineProperty, is, assign, keys} = Object;
	const {toString, hasOwnProperty} = objectProto;
	const {concat, slice, forEach} = arrayProto;

	// 传递器
	const K = (...args) => args.length <= 1 ? args[0] : args;

	// 空函数
	const E = () => {};

	// 空对象
	const O = {};

	// 获取属性
	const getProp = (obj = O, key = '', deVal) => obj[key] === void 0 ? deVal : obj[key];

	// 定义:priority,fixed,when,format
	const defineIt = (name, config = O) => {
		let priority, fixed, when, format, value;
		if( config.value === void 0 ){
			// 新方法
			priority = getProp(config, 'priority', K);
			// 兼容性方法
			fixed = getProp(config, 'fixed', K);
			// 条件 [默认为false]
			when = getProp(config, 'when', E);
			// 格式化参数
			format = getProp(config, 'format', K);
			// 主函数
			value = function(){
				let args = concat.call( arrayProto, format(...arguments) );
				return !limit.limitFixed && when(...args) ? priority(...args) : fixed(...args);
			};
		}else{
			value = config.value;
		};
		if( defineProperty ){
			defineProperty(limit, name, {
				value,
				writable: false, //只读
				enumerable: true, //被枚举
				configurable: false //更改内部属性
			});
		}else{
			if( limit[name] !== void 0){
				throw new TypeError('Cannot redefine property: ' + name);
			};
			limit[name] = value;
		};
		return value;
	};

	// 传递器
	defineIt('K', {value: K});

	// 获取属性
	defineIt('getProp', {value: getProp});

	// --错误日志-- //
		// 日志颜色
		let logColor = {
			'log': 'background:#333;margin-left:11px;padding-right:17px;',
			'error': 'background:#F00;padding-right:3px;',
			'warn': 'background:#F70;margin-left:11px;padding-right:10px;'
		};

		// 错误提醒
		let typeWarn = {
			toString: obj => log('warn', obj, 'change into', '\''+obj+'\'', 'limit.toString is called'),
			toArray: obj => log('warn', obj, 'change into []', 'limit.toArray is called'),
			formatDate: obj => log('warn', 'timestamp:', timestamp, 'date:', date, 'limit.formatDate is called'),
			bind: obj => log('warn', fun, 'type is not function, limit.bind is called')
		};

		// log
		defineIt('log', {
			value(...args){
				if(limit.logClosed) return;
				let type = args.shift(),
					con = console || O,
					log,
					isChrome = WIN.chrome;
				// 对type的处理可选值 'error'[默认]|'log'|'warn'
				// 这里可以优化用
				if( !contains(['error', 'log', 'warn'], type) ){
					args.unshift(type);
					type = 'error';
				};
				log = con[type] || K;
				// IE10下的IE8调试模式，console.log是个对象 纯IE8下 log = K;
				try{
					isChrome && args.unshift(logColor[type]+'color:#FFF;padding-left:3px;border-radius:3px;');
					args.unshift( (isChrome ? '%c' : '') +'limitJS ' + type + ':');
					log.apply(con, args);
				}catch(e){
					log('日志 ', args);
				};
			}
		});

	// --检查参数-- //
		// 如果是null undefined 返回空对象
		const checkTargetNoEqualNull = (target, ...args) => target == null ? [{}, ...args] : [target, ...args];

	// --判定方法-- //
		// 是否是DOM元素
		defineIt('isElement', { value: n => !!n && n.nodeType === 1 });

		// 判断是否是docuemtn
		defineIt('isDocument', { value: n => !!n && n.nodeType === 9 });

		// 判断是否是window
		defineIt('isWin', { value: n => !!n && n.window === n && n.self == n });

		// 是否是未定义undefined
		defineIt('isUndefined', { value: n => n === void 0 });

		// 是否是定义
		defineIt('isDefined', { value: n => !isUndefined(n) });

		// 是否是空null
		defineIt('isNull', { value: n => n === null });

		// 是否是函数function
		defineIt('isFunction', { value: n => typeof n === 'function' });

		// 是否是布尔boolean
		defineIt('isBoolean', { value: n => n === true || n === false || toString.call(n) === '[object Boolean]' });

		// 是否是这些[string number array data regexp error]对象
		'String,Number,Array,Date,RegExp,Error,Math'.replace(/\w+/g, (k) => defineIt('is' + k, { value: n => toString.call(n) === '[object '+k+']' }) );

		// 是否是对象 除了5种基本类型以外都是对象
		defineIt('isObject', { value: n => limit.isFunction(n) || typeof n === 'object' && !!n });

		// 是否是参数
		defineIt('isArguments', { value: n => has(n, 'callee') });

		// string array arguments nodeList jObject window[排除] function[排除]
		defineIt('isArrayLike', { value: n => !!n && limit.isNumber(n.length) && !limit.isFunction(n) && !limit.isWin(n) });

		// 是否是NaN
		defineIt('isNaN', { 
			when: () => !!Number.isNaN, 
			priority: (...args) => Number.isNaN(...args), 
			fixed: n => limit.isNumber(n) && isNaN(n) 
		});

		// 是否是有限的
		defineIt('isFinite', { 
			when: () => !!Number.isFinite, 
			priority: (...args) => Number.isFinite(...args), 
			fixed: n => limit.isNumber(n) && isFinite(n) 
		});

		// 是否为整数
		defineIt('isInteger', { 
			when: () => !!Number.isInteger, 
			priority: (...args) => Number.isInteger(...args), 
			fixed: n => limit.isFinite(n) && Math.floor(n) === n 
		});

		// 是否为安全整数
		defineIt('isSafeInteger', { 
			when: () => !!Number.isSafeInteger, 
			priority: (...args) => Number.isSafeInteger(...args), 
			fixed: n => limit.isInteger(n) && -9007199254740992 < n && n < 9007199254740992 
		});

	// --工具方法-- //
		

		// 私有遍历
		defineIt('_loop', {
			value: (obj, iterator, context, isBreak, begin) => {
				// 循环遍历
				let target = limit._getLoopKey(obj),
					key, num = ~~begin, len = target.length;
				for(; num < len; num++){
					key = target[num];
					if( iterator.call(context, obj[key], key, obj) === false && isBreak ) break;
				};
			}
		});

		// 获取键值
		defineIt('_getLoopKey', { value: obj => limit.isArrayLike(obj) ? limit.keys( limit.toArray(obj) ) : limit.keys(obj) });

		// 静态判定
		defineIt('has', {
			format: checkTargetNoEqualNull,
			fixed: (n, k) => hasOwnProperty.call(n, k)
		});

		// 确定是函数
		defineIt('cb', { value: callback => limit.isFunction(callback) ? callback : K });

		// 遍历
		defineIt('forin', {
			format: checkTargetNoEqualNull,
			fixed(obj, iterator, context){
				for(let key in obj){
					iterator.call(context, obj[key], key, obj);
				};
			}
		});

		// 循环
		defineIt('each', {
			format: (obj, iterator, context) => [obj, limit.cb(iterator), context],
			when: (obj) => isArrayLike(obj) && !!forEach,
			priority: (obj, iterator, context) => forEach.call(obj, (val, key) => { iterator.call(this, val, ''+key) }, context),
			value: (obj, iterator, context) => limit._loop(obj, iterator, context)
		});

	// --对象方法-- //
		// ES6: Object.is();
		defineIt('is', {
			when: () => !!is,
			priority: (...args) => is(...args),
			fixed(...args){

			}
		});

		// ES6: Object.assign();
		defineIt('assign', {
			when: () => !!assign,
			priority: (...args) => assign(...args),
			format: checkTargetNoEqualNull,
			fixed(...args){
				console.log(123);
			}
		});

		// ES5: Object.keys
		defineIt('keys', {
			when: () => !!keys,
			priority: (...args) => keys(...args),
			format: checkTargetNoEqualNull,
			fixed(obj){
				let arr = [];
				forin(obj, (val, key) => has(obj, key) && arr.push(key) );
				return arr;
			}
		});

		// mix: extend
		defineIt('extend', {
			format: checkTargetNoEqualNull,
			fixed(...args){
				console.log(123);
			}
		});

	// --数组-- //
		// toArray
		defineIt('toArray', {
			value: obj => {
				// 如果是数组原始返回
				if( limit.isArray(obj) ){
					return obj
				}
				// 如果是类数组对象的话就格式化数组
				else if( limit.isArrayLike(obj) ){
					return slice.call(obj)
				}else{
					return ( typeWarn.toArray(obj), [] );
				};
			}
		});

		// forEach

		// 


	// 返回主体
	return limit;

});